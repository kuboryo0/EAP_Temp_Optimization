#直線距離をコスト行列とした土砂配分計画問題を解くプログラム
import sys
import os
# srcディレクトリをPythonパスに追加
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import numpy as np
import random
import pulp
import time
import math
import matplotlib.pyplot as plt
from Python.function.function_ver2 import plot_route

temp_eff = 0.7
v =  1/temp_eff
tan_alpha = math.sqrt(v**2-1)
sin_alpha = math.sqrt(v**2-1)/v
distance = 0


# 仮設道路のデザイン
temporary_roads = {
}

print("temporary_roads",temporary_roads)
# #切土の座標と土量
# cut_indices = [[(1, 0),1],[(1, 2),1],[(2, 0),1],[(2, 1),1],[(2, 2),1],[(2, 3),1],[(3, 0),1],[(3, 1),1],[(3, 3),2]]
# #盛土の座標と土量
# fill_indices = [[(0, 0),2],[(0, 1),1],[(0, 2),1],[(0, 3),1],[(1, 3),2],[(1, 1),1],[(3, 2),2]]
#切土の座標と土量
cut_indices = [[(1, 2),0],[(2, 0),0],[(2, 1),0],[(2, 2),0],[(2, 3),0],[(3, 0),0],[(3, 1),0],[(3, 3),0]]
#盛土の座標と土量
fill_indices = [[(0, 0),0],[(0, 1),0],[(0, 2),0],[(0, 3),0],[(1, 0),0],[(1, 3),0],[(1, 1),0],[(3, 2),0]]

cut_indices_float = []
for i in range(len(cut_indices)):
    new_coords = (float(cut_indices[i][0][0]), float(cut_indices[i][0][1]))  # 新しいタプルを作成
    cut_indices_float.append([new_coords, cut_indices[i][1]])  # 新しいリストに追加

fill_indices_float = []
for i in range(len(fill_indices)):
    new_coords = (float(fill_indices[i][0][0]), float(fill_indices[i][0][1]))  # 新しいタプルを作成
    fill_indices_float.append([new_coords, fill_indices[i][1]])  # 新しいリストに追加

sum_cut = sum(cut_indices[i][1] for i in range(len(cut_indices)))
sum_fill = sum(fill_indices[i][1] for i in range(len(fill_indices)))
# 土量の合計が一致しているか確認
if (sum_cut != sum_fill):
    print("input error:切土と盛土の土量が違います")
    exit() 

start_time = time.time()

#土砂の分配を計画
# routes = earth_allocation(cut_indices_float, fill_indices_float)
# print("routes",routes)
routes = [((11, 1), (10, 2)), 
          ((11, 1), (9, 2)), 
          ((11, 0), (10, 0)), 
          ((11, 0), (9, 0)), 
          ((10, 1), (9, 2)), 
          ((10, 1), (9, 1)), 
          ((8, 3), (9, 3)), 
          ((8, 3), (9, 2)), 
          ((4, 1), (9, 2)), 
          ((5, 0), (9, 0)), 
          ((4, 0), (9, 0)), 
          ((3, 0), (9, 0)), 
          ((5, 2), (8, 2)), 
          ((4, 2), (8, 2)), 
          ((3, 1), (8, 2) ), 
          ((6, 1), (8, 1)), 
          ((4, 1), (8, 1)), 
          ((3, 0), (8, 0)), 
          ((2, 2), (7, 3) ), 
          ((4, 1), (7, 2)), 
          ((3, 2), (7, 2)), 
          ((2, 2), (7, 2)), 
          ((6, 1), (7, 1)), 
          ((5, 1), (7, 1) ), 
          ((4, 1), (7, 0)), 
          ((4, 0), (7, 0)), 
          ((4, 3), (6, 3)), 
          ((3, 2), (6, 3)), 
          ((3, 1), (6, 2)), 
          ((2, 2), (6, 2)), 
          ((3, 0), (6, 0)), 
          ((3, 3), (5, 3)), 
          ((2, 3), (5, 3)), 
          ((2, 2), (5, 3)), 
          ((2, 3), (1, 3)), 
          ((2, 2), (0, 1)), 
          ((1, 2), (0, 2)), 
          ((2, 1), (1, 0)), 
          ((2, 1), (0, 1)), 
          ((1, 2), (0, 1)), 
          ((2, 0), (0, 0)), 
          ((1, 1), (0, 1)), 
          ((1, 1), (0, 0))]
# # 初期解の評価
# path_list,cost = a_star(routes,temporary_roads,4)
# allocation = [
#     [((11, 1), (10, 2)), 2500.0], [((11, 1), (9, 2)), 5400.0], [((11, 0), (10, 0)), 6900.0], [((11, 0), (9, 0)), 4300.0],
#     [((10, 1), (9, 2)), 12100.0], [((10, 1), (9, 1)), 2200.0], [((8, 3), (9, 3)), 100.0], [((8, 3), (9, 2)), 2200.0],
#     [((3, 1), (9, 2)), 8800.0], [((5, 0), (9, 0)), 8000.0], [((4, 0), (9, 0)), 4000.0], [((3, 0), (9, 0)), 5700.0],
#     [((5, 2), (8, 2)), 14200.0], [((4, 2), (8, 2)), 24300.0], [((4, 1), (8, 2)), 17400.0], [((3, 1), (8, 2)), 16600.0],
#     [((6, 1), (8, 1)), 8100.0], [((3, 1), (8, 1)), 1800.0], [((3, 0), (8, 0)), 2300.0], [((2, 2), (7, 3)), 2700.0],
#     [((4, 1), (7, 2)), 5600.0], [((3, 2), (7, 2)), 22100.0], [((2, 2), (7, 2)), 6700.0], [((5, 1), (7, 1)), 22200.0],
#     [((3, 1), (7, 1)), 2600.0], [((4, 0), (7, 0)), 5000.0], [((3, 1), (7, 0)), 6200.0], [((4, 3), (6, 3)), 9000.0],
#     [((3, 2), (6, 3)), 900.0], [((2, 2), (6, 2)), 12400.0], [((3, 0), (6, 0)), 1000.0], [((3, 3), (5, 3)), 1200.0],
#     [((2, 3), (5, 3)), 900.0], [((2, 2), (5, 3)), 3800.0], [((2, 3), (1, 3)), 1400.0], [((2, 2), (0, 1)), 2500.0],
#     [((1, 2), (0, 2)), 3700.0], [((2, 1), (1, 0)), 3700.0], [((2, 1), (0, 1)), 30100.0], [((1, 2), (0, 1)), 18800.0],
#     [((2, 0), (0, 0)), 3700.0], [((1, 1), (0, 1)), 11200.0], [((1, 1), (0, 0)), 11300.0]
# ]
# print("初期解",path_list)
# print("初期解のコスト",cost)
grid_size_x = 12
grid_size_y = 4
print("routes",routes)
plot_route(grid_size_x,grid_size_y,routes,temporary_roads, cut_indices, fill_indices)


