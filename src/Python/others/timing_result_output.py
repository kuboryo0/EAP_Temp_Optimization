#新たに建てられて道路の座標ペアを出力するプログラム

best_solution = [
[[(5, 2), (6, 2)], [0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 0, 1, 1, 1,  1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(4, 1), (5, 2)], [0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 0, 0, 0, 1,  1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(6, 0), (7, 0)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 1, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(6, 2), (7, 2)], [0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 0, 1, 1, 1,  1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(4, 2), (5, 2)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(0, 1), (1, 1)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]],
[[(3, 2), (4, 2)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(5, 1), (6, 1)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(1, 1), (2, 1)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]],
[[(7, 2), (8, 2)], [0, 0, 0, 0, 0,  0, 0, 0, 1, 0,  0, 0, 1, 1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
[[(7, 0), (8, 0)], [0, 0, 0, 0, 0,  0, 0, 0, 0, 1,  1, 1, 0, 0, 0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
]

best_route = [
[[(11, 1), (10, 2)], 2500.0] ,
[[(11, 1), (10, 2), (9, 2)], 5400.0] ,
[[(11, 0), (10, 0)], 6900.0] ,
[[(11, 0), (10, 0), (9, 0)], 4300.0] ,
[[(10, 1), (9, 2)], 12100.0] , 
[[(10, 1), (9, 1)], 2200.0] ,
[[(8, 3), (9, 3)], 100.0] ,
[[(8, 3), (9, 2)], 2200.0] ,
[[(3, 1), (4, 1), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2)], 8800.0] ,
[[(5, 0), (6, 0), (7, 0), (8, 0), (9, 0)], 8000.0] ,
[[(4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)], 4000.0] ,
[[(3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)], 5700.0] ,
[[(5, 2), (6, 2), (7, 2), (8, 2)], 14200.0] ,
[[(4, 2), (5, 2), (6, 2), (7, 2), (8, 2)], 24300.0] ,
[[(4, 1), (5, 2), (6, 2), (7, 2), (8, 2)], 17400.0] ,
[[(3, 1), (4, 1), (5, 2), (6, 2), (7, 2), (8, 2)], 16600.0] ,
[[(6, 1), (7, 1), (8, 1)], 8100.0] ,
[[(3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1)], 1800.0] ,
[[(3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)], 2300.0] ,
[[(2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 3)], 2700.0] ,
[[(4, 1), (5, 2), (6, 2), (7, 2)], 5600.0] ,
[[(3, 2), (4, 2), (5, 2), (6, 2), (7, 2)], 22100.0] ,
[[(2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2)], 6700.0] ,
[[(5, 1), (6, 1), (7, 1)], 22200.0] ,
[[(3, 1), (4, 1), (5, 1), (6, 1), (7, 1)], 2600.0] ,
[[(4, 0), (5, 0), (6, 0), (7, 0)], 5000.0] ,
[[(3, 1), (4, 1), (5, 1), (6, 1), (7, 0)], 6200.0] ,
[[(4, 3), (5, 3), (6, 3)], 9000.0] ,
[[(3, 2), (4, 2), (5, 2), (6, 3)], 900.0] ,
[[(2, 2), (3, 2), (4, 2), (5, 2), (6, 2)], 12400.0] ,
[[(3, 0), (4, 0), (5, 0), (6, 0)], 1000.0] ,
[[(3, 3), (4, 3), (5, 3)], 1200.0] ,
[[(2, 3), (3, 3), (4, 3), (5, 3)], 900.0] ,
[[(2, 2), (3, 2), (4, 2), (5, 3)], 3800.0] ,
[[(2, 3), (1, 3)], 1400.0] ,
[[(2, 2), (1, 1), (0, 1)], 2500.0] ,
[[(1, 2), (0, 2)], 3700.0] ,
[[(2, 1), (1, 0)], 3700.0] ,
[[(2, 1), (1, 1), (0, 1)], 30100.0] ,
[[(1, 2), (0, 1)], 18800.0] ,
[[(2, 0), (1, 0), (0, 0)], 3700.0] ,
[[(1, 1), (0, 1)], 11200.0] ,
[[(1, 1), (0, 0)], 11300.0] ,
]

# 状態管理のための辞書
timing_state = {}

# 初期化: best_solution の各ペアを建設タイミングで記録
for solution in best_solution:
    coord_pair, timings = solution
    timing_state[tuple(coord_pair)] = 0

# 各ステップで処理
for step, route in enumerate(best_route):
    route_coords, soil_amount = route
    print(f"Step {step + 1}:")
    
    # 新たに建てられたものを検出
    newly_built = []
    for solution in best_solution:
        coord_pair, timings = solution
        if timings[step] == 1 and timing_state[tuple(coord_pair)] == 0:
            newly_built.append(coord_pair)
            timing_state[tuple(coord_pair)] = 1

    # 出力: 新たに建てられたもの
    if newly_built:
        print("  Newly built pairs:")
        print(newly_built)
    else:
        print("  No new pairs built.")

    # best_route のスタート・ゴールに関連するペアを無効化
    start, *_, goal = route_coords
    for solution in best_solution:
        coord_pair, timings = solution
        if start in coord_pair or goal in coord_pair:
            timing_state[tuple(coord_pair)] = 0

    print()
